__author__ = 'johan'

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#   1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#    10: 1,2,5,10
#    15: 1,3,5,15
#    21: 1,3,7,21
#    28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

import math


def get_triangle_number(x):
    return math.floor(x * (x + 1) / 2)


def count_divisors(number):
    result = 0

    for i in range(math.ceil(math.sqrt(number))):
        if number % (i + 1) == 0:
            result += 2

    return result

def is_triangle_number(number):
    i = 1

    while (i * (i + 1)) / 2 < number:
        i += 1

    return (i * (i + 1)) / 2 == number



def brute_force():
    temp = 1

    while count_divisors(get_triangle_number(temp)) < 500:
        temp += 1

    return temp


print(brute_force())
print(12375 * 12376 / 2)
print(get_triangle_number(math.sqrt(76576500)))
print(count_divisors(76576500))
print(is_triangle_number(76576500))


