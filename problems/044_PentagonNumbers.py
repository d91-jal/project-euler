# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
# The first ten pentagonal numbers are:
#
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145
#
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
#
# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and
# D = |Pk − Pj| is minimised; what is the value of D?
#
# TODO: Improve performance!

from ProjectEuler.utils.utils import get_pentagonal, is_pentagonal
import datetime


# Loop over pentagonals, computing sum and difference of pairs and evaluate if those
# are also pentagonals. Loop using minimal offset between candidates, thus hitting the
# smallest possible answer first.
def find_candidates(size):
    print("Starting ", datetime.datetime.now())

    for h in range(1, size-1):
        # print("Processing an offset of ", h)

        for i in range(h+1, size):
            p1 = get_pentagonal(i-h)
            p2 = get_pentagonal(i)

            if is_pentagonal(p1+p2) and is_pentagonal(p2-p1):
                print("Found ", p1, p2, p2-p1)
                print("Stopping ", datetime.datetime.now())
                return

    print("Nothing found.")


find_candidates(2200)


